# Docker Commands for Basic Operations

# To display docker version available in the machine
docker --version

# To pull image from DockerHub
docker pull <image-name>

# To run display available images
docker images

# To create containers from images
docker run -dit <image-name>

# To create containers from images with name
docker run -dit --name container-name <image-name>

# To display running containers (This command will not return containers which are in stopped state)
docker ps

# To display all the container (running/stopped)
docker ps -a

# To use/work in a container or to execute container
docker exec -it <container-id> bash

# Portmapping a container and exposing it to the world
docker run -dit -p <host-port>:<container-port> <image-name>

# To stop a container
docker stop <container-id>

# To kill a container (Killing the container refers to forcefully shutting down the container)
docker kill <container-id> 

# To remove/delete a container (Please make sure the container is in stopped condition while running the following command)
docker rm <container-id>

# To remove/delete a container while it is in running state
docker rm -f <container-id>

# To remove/delete a docker image (Please make sure there are no associated containers to the image)
docker rmi <image-name>

# To login to dockerhub from terminal to push images
docker login

# To push images
docker push <dockerhub-username>/<image-name-with-tag>

# To save a custom container as image
docker commit <container-id> <desired-image-name>

# To build a docker image using docker file
docker build <path-to-the-dockerfile> -t <desired-image-name>

# To create a Docker volume
docker volume create <volume-name>

# To list all docker volumes
docker volume ls

# To check volume details
docker inspect <volume-name>

# To remove volume 
docker volume rm <volume-name>

# To remove all the volumes
docker volume prune

# To mount a Docker volume with the container
docker run -dit --name container-name --mount source=<volume-name>,destination=<path-where-you-would-like-to-store> -p host-port:container-port image-name
docker run -dit --name container-name --volume source-path:destination-path -p host-port:container-port image-name

# To mount a Docker volume with the container in readonly mode
docker run -dit --name container-name --mount source=<volume-name>,destination=<path-where-you-would-like-to-store>,readonly -p host-port:container-port image-name

# To mount a remote driver
docker plugin install vieux/sshfs
on remote machine enable password authentication
docker volume create --driver drivername -o -sshcmd=username@ip:pathforstorageinhost -o password=password volumename
docker run -dit --name containername --mount source=volname,target=targetpath imagename

# To backup from volumes
docker run --rm -volumes-from sourcecomtainer -v $(pwd):/backup imagename tar cvf /backup/backup.tar /app

# To create volumes from backup
docker run --rm -volumes-from

# To create bind mounts
docker run -dit --name container-name -v source-path:destination-path -p host-port:container-port image-name

# To link containers
docker run -dit --name <new-container-name> --link <desired-container-to-be-linked> image-name

# To execute a Docker Compose file
docker-compose up -d

# To bring down/delete all containers created using docker compose 
docker-compose down

# To initialise Docker Swarm cluster

--> Since docker swarm cluster follows Master-Slave architecture, we need atleast 2 machines (Master, Slave)

> Execute the following command in Master machine
docker swarm init --advertise-addr=<master-node-ip>

> Copy the output of the command and paste it in the Slave node

# To display the nodes in the swarm cluster
docker node ls

# To create a service in docker swarm
docker service create --name service-name --replicas <number-of-replicas> -p host-port:container-port image-name

# To list all services
docker service ls

# To remove a service
docker service rm

# To create a network
docker network create --driver <network-type> nework-name

# To bind a service to a network
docker service create --name service-name --replicas <number-of-replicas> --network network-name -p host-port:container-port image-name
